@page "/Create"
@using editor.Models
@using SkiaSharp
@using SkiaSharp.Views.Blazor
@inject HttpClient Http
<PageTitle>Create</PageTitle>

<div id="document-interface">
    <nav class="nav navbar-expand-lg">
        <div class="container-fluid">
            <div class="collapse navbar-collapse">
                <ul class="navbar-nav">
                    <li class="nav-item"><a class="nav-link">Add Page</a></li>
                </ul>
                <EditForm Model="Model">
                    <label>Font size
                        <InputSelect @bind-Value="Model!.FontSize" @oninput="OnFormChange">
                            @foreach (var size in FontSizes)
                            {
                                <option value="@size">@size</option>
                            }
                        </InputSelect>
                    </label>
                </EditForm>
            </div>
        </div>
    </nav>
    <SKCanvasView style="width: 100%; height: 100%; display: block;" id="document-canvas" IgnorePixelScaling="true"
                  tabindex="0" @ref="_canvasView" @onclick="CanvasClick" @onkeydown="OnCanvasKeyDown"
                  @onwheel="OnCanvasWheel" OnPaintSurface="OnPaintSurface"/>
</div>

@code {
    private DocumentInfo? Model { get; set; }
    private List<int> FontSizes { get; } = [8, 9, 10, 11, 12, 45];

    private Document? _document;
    private SKCanvasView? _canvasView;
    private SKTypeface? _typeface;

    protected override void OnInitialized()
    {
        Model ??= new DocumentInfo();
    }

    protected override async Task OnInitializedAsync()
    {
        await using var stream = await Http.GetStreamAsync("fonts/Arial.ttf");
        _typeface = SKTypeface.FromStream(stream);
    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {
        _document ??= new Document(_canvasView!, args.Info.Height, 816, 1056, 10, 96, 96, 96, 96, 11, 1.15f);
        if (_typeface is not null)
        {
            _document.SetTypeface(_typeface);
        }

        _document.DrawPages(args.Surface.Canvas);
        _document.DrawCharacters(args.Surface.Canvas);
        _document.DrawCursor(args.Surface.Canvas);
    }

    private void CanvasClick(MouseEventArgs args)
    {
        /*_currentX = (float) args.OffsetX;
        _currentY = (float) args.OffsetY;*/
    }

    private void OnCanvasKeyDown(KeyboardEventArgs args)
    {
        switch (args.Code)
        {
            case "Space":
                _document?.AddChar(' ');
                break;
            case "Enter":
                _document?.AddChar('\n');
                break;
            case "Backspace":
                _document?.DeleteChar();
                break;
            case "Tab":
                _document?.AddChar('\t');
                break;
            default:
                if (args.Key.Length == 1)
                {
                    _document?.AddChar(args.Key[0]);
                }

                break;
        }
    }

    private void OnCanvasWheel(WheelEventArgs eventArgs)
    {
        _document?.Scroll((float)eventArgs.DeltaY);
    }

    private void OnFormChange(ChangeEventArgs args)
    {
        if (args.Value is null) return;
        _document?.ChangeFontSize(float.Parse((string)args.Value));
    }

}