@page "/Create"
@using SkiaSharp.Views.Blazor
@using SkiaSharp
@using System.Text.RegularExpressions

<PageTitle>Create</PageTitle>

<div id="document-interface">
    <h1>Doc Name</h1>
    <ul class="nav nav-underline">
        <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" data-bs-toggle="dropdown" role="button" aria-expanded="false">File</a>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item">Save</a></li>
            </ul>
        </li>
    </ul>
    <div id="binder">
        <SKCanvasView tabindex="0" @ref="_canvas" @onclick="CanvasClick" @onkeydown="OnCanvasKeyDown" Width="408" Height="528" OnPaintSurface="OnPaintSurface" />
    </div>
</div>

@code {
    private SKCanvasView? _canvas;
    private float _currentX {get; set;} = 0; 
    private float _currentY {get; set;} = 0;
    private float _cursorX {get; set;} = 96f;
    private float _cursorY {get; set;} = 96f;
    private float _pageWidth {get; set;} = 816f;
    private float _pageHeight {get; set;} = 1056f;
    private float _fontSize {get; set;} = 22f;
    private float _rightMargin {get; set;} = 96f; 
    private float _leftMargin {get; set;} = 96f;
    private float _topMargin {get; set;} = 96f;
    private float _bottomMargin {get; set;} = 95f;
    private string _letter {get; set;} = string.Empty;

    private void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {
        var canvas = args.Surface.Canvas; 
        canvas.Clear(SKColors.LightGray);

        using var paint = new SKPaint {
            Color = SKColors.Black,
            StrokeWidth = 2,
            IsAntialias= true,
        };
        using var paintLine = new SKPaint {
            Color = SKColors.Red,
            StrokeWidth = 2,
            IsAntialias= true,
        };
        
        canvas.DrawLine(_pageWidth - _rightMargin, _topMargin, _pageWidth - _rightMargin, _pageHeight - _bottomMargin, paint);
        canvas.DrawLine(_topMargin, _topMargin, _topMargin, _pageHeight - _bottomMargin, paint);
        canvas.DrawLine(_topMargin, _topMargin, _pageWidth - _rightMargin, _topMargin, paint);
        canvas.DrawLine(_leftMargin, _pageHeight - _bottomMargin, _pageWidth - _rightMargin, _pageHeight - _bottomMargin, paint);

        canvas.DrawLine(_cursorX, _cursorY, _cursorX, _cursorY + _fontSize, paintLine);
    }
    private void CanvasClick(MouseEventArgs args)
    {
        _currentX = (float) args.OffsetX;
        _currentY = (float) args.OffsetY;
    }
    private void OnCanvasKeyDown(KeyboardEventArgs args)
    {
        _letter = args.Key; 
        
        switch (args.Code){
            case "Space": 
                _cursorX += _fontSize;
                if(_cursorX > _pageWidth - _rightMargin){
                    _cursorX = _leftMargin;
                    _cursorY += _fontSize;
                }
                break;
            case "Backspace":
                if(_cursorX == _leftMargin && _cursorY > _topMargin){
                    _cursorX = _pageWidth - _rightMargin;
                    _cursorY -= _fontSize;
                }else {
                    _cursorX = Math.Max(_cursorX - _fontSize, _leftMargin);
                }
                break;
            default:
                var letterPattern = new Regex(@"^\S$");
                if(letterPattern.IsMatch(args.Key)){
                    Console.WriteLine("Letter or digit");
                }else {
                    Console.WriteLine("Not letter or digit");
                }
                break;
        }
        _canvas?.Invalidate();
    }
}    

