@page "/"
@using System.Drawing
@using EditR.Models
@using EditR.Services
@using LanguageExt.Pipes
@using LanguageExt.Pretty
@using SkiaSharp.Views.Blazor
@inject IFontService FontService;

<PageTitle>Home</PageTitle>

<div id="document-interface">
    <EditMenu Model="_model" FontValueChanged="OnFontSelected"/>
    <div id="canvas-wrapper">
        <SKCanvasView IgnorePixelScaling="true" tabindex="0" @ref="_canvasView"
                      @onpointerup="CanvasOnPointerUp" @onpointermove="CanvasOnPointerMove"
                      @onpointerdown="CanvasOnPointerDown" @onkeydown="OnCanvasKeyDown"
                      @onwheel="OnCanvasWheel" OnPaintSurface="OnPaintSurface"/>
    </div>
</div>

@code {
    private readonly PageInfo _model = new();
    private Document? _document;
    private SKCanvasView? _canvasView;

    private double _xStart;
    private double _yStart;
    private bool _isPointerDown;
    private bool _isPointerDrag;

    protected override async Task OnInitializedAsync()
    {
        await FontService.LoadFont(_model.SelectedFont.Index);
    }

    private void OnPaintSurface(SKPaintSurfaceEventArgs args)
    {
        if (_document is null)
        {
            _document = new Document((args.Info.Width, args.Info.Height));
            _document.UpdateSettings(_model);
        }

        var fonts = FontService.GetAllFonts();
        var currentFont = fonts[_model.SelectedFont.Index];

        _document.DrawPages(args.Surface.Canvas, _model.Width, _model.Height);
        _document.DrawCharacters(args.Surface.Canvas, fonts);
        _document.DrawCursor(args.Surface.Canvas, _model.TopMargin, _model.LeftMargin, _model.PixelSize, _model.LineSpacing, currentFont);
    }

    private void OnCanvasKeyDown(KeyboardEventArgs args)
    {
        var currentFont = FontService.GetFont(_model.SelectedFont.Index);
        switch (args.Code)
        {
            case "Space":
                _document?.AddChar(' ', _model, currentFont);
                break;
            case "Enter":
                Console.WriteLine("Enter clicked");
                _document?.AddChar('\n', _model, currentFont);
                break;
            case "Backspace":
                _document?.DeleteChar();
                break;
            case "Tab":
                _document?.AddChar('\t', _model, currentFont);
                break;
            case "ArrowRight":
                _document?.PanRight();
                break;
            case "ArrowLeft":
                _document?.PanLeft();
                break;
            default:
                if (args.Key.Length == 1)
                {
                    _document?.AddChar(args.Key[0], _model, currentFont);
                }

                break;
        }

        _canvasView?.Invalidate();
    }

    private void OnCanvasWheel(WheelEventArgs eventArgs)
    {
        _document?.Scroll((float)eventArgs.DeltaY, _model.Gap);
        _canvasView?.Invalidate();
    }

    private async Task OnFontSelected(FontSelectRow row)
    {
        _model.SelectedFont = row;
        await FontService.LoadFont(row.Index);
    }

    private void CanvasOnPointerDown(PointerEventArgs obj)
    {
        switch (obj.Button)
        {
            case 0:
                _isPointerDown = true;
                _isPointerDrag = false;
                _xStart = obj.OffsetX;
                _yStart = obj.OffsetY;
                break;
        }
    }

    private void CanvasOnPointerUp(PointerEventArgs obj)
    {
        _isPointerDown = false;
        if (_isPointerDrag) return;
        _document?.Unselect();
        _document?.MoveCursor(((float)obj.OffsetX, (float)obj.OffsetY));
        _canvasView?.Invalidate();
    }

    private void CanvasOnPointerMove(PointerEventArgs obj)
    {
        if (!_isPointerDown) return;
        _isPointerDrag = Math.Abs(obj.OffsetX - _xStart) >= 5 || Math.Abs(obj.OffsetY - _yStart) >= 5;
        if (!_isPointerDrag) return;
        _document?.Unselect();
        _document?.Select(((float)_xStart,(float) _yStart), ((float)obj.OffsetX, (float)obj.OffsetY));
        _canvasView?.Invalidate();
    }

}